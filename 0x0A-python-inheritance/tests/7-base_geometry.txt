Testing the BaseGeometry class:

Testing importL
    >>> geometry = __import__('7-base_geometry').BaseGeometry

Area method not implemented:
    >>> geometry = BaseGeometry()
    >>> geometry.area()
    Traceback (most recent call last):
            ...
    Exception: area() is not implemented

Integer Validator - Valid Input:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("side_length", 5)

    >>> geometry.integer_validator("width", 10)

Integer Validator - Invalid Type:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("side_length", "invalid")
    Traceback (most recent call last):
            ...
    TypeError: side_length must be an integer

Integer Validator - Invalid Value (less than or equal to 0):
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("height", 0)
    Traceback (most recent call last):
            ...
    ValueError: height must be greater than 0

    >>> geometry.integer_validator("radius", -5)
    Traceback (most recent call last):
            ...
    ValueError: radius must be greater than 0

Integer Validator - Handling boolean values:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("is_valid", True)
    Traceback (most recent call last):
            ...
    TypeError: is_valid must be an integer

Integer Validator - Handling negative values:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("temperature", -5)
    Traceback (most recent call last):
            ...
    ValueError: temperature must be greater than 0

Integer Validator - Handling None:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("count", None)
    Traceback (most recent call last):
            ...
    TypeError: count must be an integer
